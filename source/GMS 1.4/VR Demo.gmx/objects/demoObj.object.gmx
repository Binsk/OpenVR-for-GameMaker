<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize 3D
//d3d_start();
_modelBlock = d3d_model_create();
var __size = 0.2;
d3d_model_block(_modelBlock, -__size, -__size, -__size, __size, __size, __size, 1, 1);

_modelController = d3d_model_create();
d3d_model_block(_modelController, -0.03, -0.03, -0.02, 0.03, 0.03, 0.14, 1, 1);

_surfaceLeft = surface_create(GMVR_RESOLUTION.width, GMVR_RESOLUTION.height);
_surfaceRight = surface_create(GMVR_RESOLUTION.width, GMVR_RESOLUTION.height);

_controllerCount = 0;
_controllerArray = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Print Errors
while (true)
{
    var __str = vr_system_get_errormessage();
    if (__str == "")
        break;
        
    var __init,
        __comp;
    __init = vr_init_get_error(_vrHandle);
    __comp = vr_compositor_get_error(_vrHandle);
        
    show_debug_message("ERROR ["+string(__init) + ", " + string(__comp) + "]:    " + __str);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Controllers
    // Handle controller data:
_controllerCount = vr_controller_get_count(_vrHandle);
_controllerArray = 0; // Clear array
    
    // Fill our controller array with data:
for (var i = _controllerCount - 1; i &gt;= 0; --i)
    _controllerArray[i] = vr_controller_get_data(_vrHandle, i);
    
// Demo, output presses from our controllers:
for (var i = 0; i &lt; _controllerCount; ++i)
{
    var __controllerData = _controllerArray[i];
    
        // If nothing has happened with the buttons then we don't output:
    if (!__controllerData[GMVR_CONTROLLER_DATA.stateHasChanged])
        continue;
        
    if (__controllerData[GMVR_CONTROLLER_DATA.btnSystem_Pressed])
        show_debug_message("Controller " + string(i + 1) + ": Pressed system button!");
        
    if (__controllerData[GMVR_CONTROLLER_DATA.btnApp_Pressed])
        show_debug_message("Controller " + string(i + 1) + ": Pressed application button!");
        
    if (__controllerData[GMVR_CONTROLLER_DATA.btnGrip_Pressed])
        show_debug_message("Controller " + string(i + 1) + ": Pressed grip button!");
        
    if (__controllerData[GMVR_CONTROLLER_DATA.btnTouchpad_Pressed])
        show_debug_message("Controller " + string(i + 1) + ": Pressed touchpad button!");
        
    if (__controllerData[GMVR_CONTROLLER_DATA.btnTouchpad_Touched])
    {
        show_debug_message("Controller " + string(i + 1) + ": Touchpad axes [" +
                           string(__controllerData[GMVR_CONTROLLER_DATA.axisTouchpad_X]) + ", " +
                           string(__controllerData[GMVR_CONTROLLER_DATA.axisTouchpad_Y]) + "]");
    }
    
    if (__controllerData[GMVR_CONTROLLER_DATA.axisTrigger_X] != 0)
        show_debug_message("Controller " + string(i + 1) + ": Triger value [" +
                           string(__controllerData[GMVR_CONTROLLER_DATA.axisTrigger_X]) + "]");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
vr_system_destroy(_vrHandle);
vr_system_deinit();
d3d_model_destroy(_modelBlock);
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize VR
vr_system_init("GMVive Wrapper.dll");
if (!vr_system_get_hmdexists())
{
    show_message("Could not detect HMD!");
    game_end();
    exit;
}

_vrHandle = vr_system_create();
if (is_undefined(_vrHandle))
{
    while (true)
    {
        var __str = vr_system_get_errormessage();
        if (__str == "")
            break;
            
        show_message("ERROR:    " + __str);
    }
    game_end();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Scene


draw_set_color(c_white);
draw_set_alpha(1.);

// Check if we are ready to render:
var __chaperoneState = vr_chaperone_get_state(_vrHandle);
if (__chaperoneState != GMVR_CHAPERONE_STATE.okay)
{
    draw_text(10, 10, "Chaperone error: " + string(vr_chaperone_get_state(_vrHandle)) +
                      "#Is SteamVR still booting?");
    
    exit;
}


var __matrixViewOld = matrix_get(matrix_view),
    __matrixProjOld = matrix_get(matrix_projection);

// Grab required matrices:
//      NOTE:   The matrix format is no longer model * view * projection
//              It is now model * view * hmd * eye * projection
var __hmdView = vr_hmd_get_viewmatrix(_vrHandle);
var __eyeProjLeft = vr_eye_get_projmatrix(_vrHandle, GMVR_EYE.left, 0.001, 64.),
    __eyeProjRight = vr_eye_get_projmatrix(_vrHandle, GMVR_EYE.right, 0.001, 64.);
var __eyeViewLeft = matrix_multiply(__hmdView, vr_eye_get_viewmatrix(_vrHandle, GMVR_EYE.left)),
    __eyeViewRight = matrix_multiply(__hmdView, vr_eye_get_viewmatrix(_vrHandle, GMVR_EYE.right));

// Render left eye:
surface_set_target(_surfaceLeft);
matrix_set(matrix_view, __eyeViewLeft);
matrix_set(matrix_projection, __eyeProjLeft);
draw_clear(c_black);
d3d_model_draw(_modelBlock, 0, 0, 0, sprite_get_texture(blockTex, 0));

    // Render our controllers:
for (var i = 0; i &lt; _controllerCount; ++i)
{
    var __matrixWorldOld = matrix_get(matrix_world);
    var __controllerData = _controllerArray[i];
    matrix_set(matrix_world, __controllerData[GMVR_CONTROLLER_DATA.matrix]);
    d3d_model_draw(_modelController, 0, 0, 0, sprite_get_texture(blockTex, 0));
    matrix_set(matrix_world, __matrixWorldOld);
}

surface_reset_target();

// Render right eye:
surface_set_target(_surfaceRight);
matrix_set(matrix_view, __eyeViewRight);
matrix_set(matrix_projection, __eyeProjRight);
draw_clear(c_black);
d3d_model_draw(_modelBlock, 0, 0, 0, sprite_get_texture(blockTex, 0));

    // Render our controllers:
for (var i = 0; i &lt; _controllerCount; ++i)
{
    var __matrixWorldOld = matrix_get(matrix_world);
    var __controllerData = _controllerArray[i];
    matrix_set(matrix_world, __controllerData[GMVR_CONTROLLER_DATA.matrix]);
    d3d_model_draw(_modelController, 0, 0, 0, sprite_get_texture(blockTex, 0));
    matrix_set(matrix_world, __matrixWorldOld);
}

surface_reset_target();

// Push data to the display:
vr_hmd_set_textures(_vrHandle, _surfaceLeft, _surfaceRight);

// Draw left-eye for debugging on the monitor:
draw_surface_ext(_surfaceLeft, 0, 0, .5, .5, 0, c_white, 1.);

// Debugging data:
d3d_set_projection_ortho(0, 0, room_width, room_height, 0);
draw_set_halign(fa_left);
var __controllerMatrix = "##Controller 1:#";
if (_controllerCount &gt; 0)
{
    var __controllerData = _controllerArray[0];
    __controllerMatrix += matrix_tostring(__controllerData[GMVR_CONTROLLER_DATA.matrix]);
}
draw_text(10, 10, "FPS: " + string(fps_real) + "/ " + string(room_speed));
draw_text(10, 24, "HMD: #" + matrix_tostring(__hmdView) + 
                  "##LEye View:#" + matrix_tostring(__eyeViewLeft) + 
                  "##LEye Proj:#" + matrix_tostring(__eyeProjLeft) +
                  "##Controllers: " + string(_controllerCount) +
                  __controllerMatrix);
                  
draw_set_halign(fa_right);
var __playspaceBounds = vr_playspace_get_dimensions(_vrHandle);
draw_text(room_width - 10, 10, "Play Width: " + string(__playspaceBounds[0]) +
                               "#Play Height: " + string(__playspaceBounds[1]));
                               
// Reset matrices:
matrix_set(matrix_view, __matrixViewOld);
matrix_set(matrix_projection, __matrixProjOld);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade from home
vr_system_fadefromhome(_vrHandle, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade to home
vr_system_fadetohome(_vrHandle, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
