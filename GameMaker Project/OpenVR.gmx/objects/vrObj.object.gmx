<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start VR
draw_set_color(c_white);
draw_set_alpha(1.);

// Initialize base VR variables:
vr_init();
_vrStarted = false;

// Check if the headset is plugged in before initializing:
// (Fast and easy check)
if (!vr_sees_hmd())
{
    show_message("No headset found!");
    game_end();
    exit;
}

// Start VR system and check for errors (SLOW)
// The game can be running while SteamVR takes a minute to boot!
// While this is happening, your matrices and such will return with errors!
// Just be patient or boot SteamVR before running your game.
var __err = vr_start(HMD.hresolution, HMD.vresolution);
if (__err != VR_INIT_ERROR.none)
{
    show_message("Error (" + string(__err) + ")");
    game_end();
    exit;
}
_vrStarted = true;
_gridVisible = true; // Default is true
_fadeVisible = false;
_fadeColor = c_red;

_gripButton[1] = false;
_gripButton[0] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inputs
// NOTE: This is REQUIRED otherwise the VR system doesn't push updates to the display!
var __eventCount = vr_update_events(); // Updates the system events



// See what the events were;
for (var i = 0; i &lt; __eventCount; ++i)
{
    var __event = vr_pull_event();
    if (is_undefined(__event))
        continue;
    
    switch (__event[0])
    {
        case VR_EVENT_TYPE.controller_button_pressed:
            if (__event[1] == VR_EVENT_DETAIL.grip_btn)
            {
                _gripButton[__event[3] - 1] = true;
                grab_interactive(__event[3], matrix_get_position(vr_get_matrix_controller(__event[3])));
            }
        break;
        
        case VR_EVENT_TYPE.controller_button_released:
            if (__event[1] == VR_EVENT_DETAIL.grip_btn)
            {
                _gripButton[__event[3] - 1] = false;
                drop_interactive(__event[3]);
            }
        break;
        
        default:
         // NOTHING
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill VR
// Free up the VR system:
if (_vrStarted)
    vr_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debugging
// Check d3dControllorObj for updating / rendering!
d3d_set_lighting(false);

// Draw debugging stuff:
if (surface_exists(d3dControllerObj._mainSurface))
    draw_surface_ext(d3dControllerObj._mainSurface, 0, 0, room_width / HMD.hresolution, room_height / HMD.vresolution,
                     0, c_white, 1.);
var __controllers = vr_get_controllercount();
var __controllerStr = "#";
for (var i = 0; i &lt; __controllers; ++i)
    __controllerStr += "Controller Grip State [" + string(i + 1) + "]: " + string(_gripButton[i]) + "#";
    
draw_text(10, 10, "FPS: " + string(fps_real) + " / 90#Triangles: " + string(d3dControllerObj._triangles));
draw_text(10, 10, "##Play Size: [" + string(vr_get_playwidth()) + ", " + string(vr_get_playheight()) + "] meters" + 
                  "#Controllers: " + string(__controllers) + 
                  "#Chaperone State: " + string(vr_get_chaperonestate()) + 
                  __controllerStr);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_gridVisible = !_gridVisible;
if (!_gridVisible)
    vr_home_fadeout(1.);
else
    vr_home_fadein(1.);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game End
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_fadeVisible = !_fadeVisible;
if (!_fadeVisible)
    vr_color_fade(2., 0., 0.);
else
    vr_color_fade(2., _fadeColor, 1.);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch Fullscreen
window_set_fullscreen(!window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
